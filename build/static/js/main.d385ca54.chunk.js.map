{"version":3,"sources":["Main.js","Header.js","Filter.jsx","Aside.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","errorMsg","error","imageCount","images","length","sidebarClass","usernameQuery","imageList","map","image","key","imageUrl","id","alt","executedQuery","className","src","username","href","title","data-username","onClick","e","handleUsernameClick","Header","handleSubmit","htmlFor","type","value","inputValue","onChange","handleInput","Filter","limit","handleLimitChange","rating","handleRatingChange","language","handleLangChange","Aside","useState","query","queryError","queryData","setData","useEffect","api","baseUrl","lang","url","fetch","then","response","status","json","Error","statusText","jsonResults","data","item","catch","console","log","handleUsernameResetClick","App","process","state","bind","preventDefault","this","setState","target","dataset","Object","assign","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d385ca54.chunk.js","sourcesContent":["import React from 'react';\nimport './main.css';\n\nfunction Main(props) {\n\n    const errorMsg = props.error;\n    const imageCount = props.images.length;\n    const sidebarClass = props.usernameQuery.length ? 'hasSidebar' : '';\n\n    // error message found\n    if ( errorMsg !== '') {\n        return (\n            <main>\n                <p>Error: { props.error }</p>\n            </main>\n        )\n    }\n\n    // no images found\n    if ( imageCount === 0) {\n        return (\n            <main>\n                <p>No giphies yet! Search for something interesting above.</p>\n            </main>\n        )\n    }\n\n    // we have images and no errors. Wahoo!\n    const imageList = props.images.map( (image, key) => {\n\n        const imageUrl = `https://i.giphy.com/media/${image.id}/100.gif`;\n        const alt = `giphy from search phase: ${props.executedQuery}`;\n        return (\n            <div key={\"div\"+key} className=\"imageBox\">\n                <img key={key} src={imageUrl} alt={alt} />\n                { image.username.length ? \n                    (<p key={\"a\"+key}><a \n                        href=\"/\" \n                        title=\"See more by this creator\"\n                        data-username={ image.username }\n                        onClick={ (e)=>props.handleUsernameClick(e) }\n                        >\n                        { image.username }</a></p>)  : \n                    (<p className=\"anonymous\" key={\"b\"+key}>No attribution</p>) }\n            </div>\n        );\n    });\n\n    return (\n        <main className={sidebarClass}>\n            <p>Your Giphy search for \"{props.executedQuery}\" returned {imageCount} results.</p>\n            {imageList}\n        </main>\n    );\n\n}\n\nexport default Main;","import React from 'react';\nimport './header.css';\n\nfunction Header(props) {\n\n    return (\n\n        <header className=\"App-header\">\n            <h1>Giphy Madness!</h1>\n            <form onClick={props.handleSubmit}>\n\n                <label htmlFor=\"queryInput\">\n                    Search: \n                </label>\n\n                <input \n                type=\"text\" \n                id=\"queryInput\"\n                value={props.inputValue}\n                onChange={props.handleInput} \n                /> \n\n                <input\n                type=\"submit\"\n                value=\"Submit\"\n                className=\"submit_btn\"\n                />          \n                \n            </form>\n        </header>\n    );\n\n}\n\nexport default Header;","import React from 'react';\nimport './filter.css';\n\nfunction Filter(props) {\n\n    return (\n        <section className=\"filterContainer\">\n            <div className=\"filter\">\n                <div>\n                    <label htmlFor=\"limit\">Limit:</label> \n                    <select value={props.limit} onChange={props.handleLimitChange} id=\"limit\">\n                        <option value=\"5\">5</option>\n                        <option value=\"10\">10</option>\n                        <option value=\"25\">25</option>\n                        <option value=\"50\">50</option>\n                    </select>\n                </div>  \n                <div>\n                    <label htmlFor=\"rating\">Rating:</label> \n                    <select value={props.rating} onChange={props.handleRatingChange} id=\"rating\">\n                        <option value=\"G\">G</option>\n                        <option value=\"PG\">PG</option>\n                        <option value=\"PG-13\">PG-13</option>\n                        <option value=\"R\">R</option>\n                    </select>\n                </div>            \n                <div>\n                    <label htmlFor=\"language\">Language:</label> \n                    <select value={props.language} onChange={props.handleLangChange} id=\"language\">\n                        <option value=\"en\">English</option>\n                        <option value=\"fr\">French</option>\n                        <option value=\"de\">German</option>\n                        <option value=\"Russian\">Russian</option>\n                    </select>\n                </div>\n            </div>\n        </section>\n    );\n}\n\nexport default Filter;","import React, { useState, useEffect } from \"react\";\nimport \"./aside.css\";\n\nconst Aside = props => {\n  const [queryData, setData] = useState({\n    query: \"\",\n    queryError: \"\",\n    executedQuery: \"\",\n    images: []\n  });\n\n  useEffect(() => {\n    // set query parameters and reset error message\n    let queryError = \"\";\n    const { key, baseUrl, rating, lang } = props.api;\n    const limit = 5;\n    const query = `@${props.usernameQuery}`;\n    const url = `${baseUrl}?api_key=${key}&q=${query}&limit=${limit}&offset=0&rating=${rating}&lang=${lang}`;\n\n    // request the giphies\n    fetch(url)\n      .then(response => {\n        if (response.status >= 200 && response.status <= 299) {\n          return response.json();\n        } else {\n          throw Error(response.statusText);\n        }\n      })\n      .then(jsonResults => {\n        // get image id to build image tags later\n        const images = jsonResults.data.map(item => {\n          return { id: item.id, username: item.username };\n        });\n        setData({ images, executedQuery: query, query: \"\", queryError });\n      })\n      .catch(error => {\n        // log your error. Don't do console.log, of course.\n        console.log(error);\n\n        // tell the user\n        queryError = \"There was a problem with your query. Please try again.\";\n\n        setData({ executedQuery: query, query: \"\", queryError });\n      });\n  });\n\n  let sidebarClass = props.usernameQuery.length ? \"hasSidebar\" : \"\";\n\n  const imageList = queryData.images.map((image, key) => {\n    const imageUrl = `https://i.giphy.com/media/${image.id}/100.gif`;\n    return <img key={key} src={imageUrl} alt=\"giphy\" />;\n  });\n  return (\n    <aside className={sidebarClass}>\n      <a\n        href=\"/\"\n        className=\"closeBox\"\n        onClick={e => props.handleUsernameResetClick(e)}\n      >\n        X\n      </a>\n      <h2>Giphies by {props.usernameQuery}</h2>\n      {imageList}\n    </aside>\n  );\n};\n\nexport default Aside;\n","import React from 'react';\nimport Main from './Main';\nimport Header from './Header';\nimport Filter from './Filter';\nimport Aside from './Aside';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    console.log(process.env);\n    super(props);\n    // \n    this.state = {\n      \"query\": \"\",\n      \"queryError\": \"\",\n      \"executedQuery\": \"\",\n      \"images\": [],\n      \"api\": {\n        \"key\": process.env.REACT_APP_API_KEY,\n        \"baseUrl\": \"https://api.giphy.com/v1/gifs/search\",\n        \"limit\": 5,\n        \"rating\": \"G\",\n        \"lang\": \"en\"\n      },\n      usernameQuery: \"\"\n    };\n\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleLimitChange = this.handleLimitChange.bind(this);\n    this.handleLangChange = this.handleLangChange.bind(this);\n    this.handleRatingChange = this.handleRatingChange.bind(this);\n    this.handleUsernameClick = this.handleUsernameClick.bind(this);\n    this.handleUsernameResetClick = this.handleUsernameResetClick.bind(this);\n  }\n\n  handleUsernameClick(e) {\n    e.preventDefault();\n    this.setState({ \"usernameQuery\": e.target.dataset.username });\n  }\n\n  handleUsernameResetClick(e) {\n    e.preventDefault();\n    console.log('clicked');\n    this.setState({ \"usernameQuery\": '' });\n  }\n\n  handleLimitChange(e) {\n    let api = Object.assign({}, this.state.api);\n    api.limit = e.target.value;\n    this.setState({\"api\": api});\n  }\n\n  handleLangChange(e) {\n    let api = Object.assign({}, this.state.api);\n    api.lang = e.target.value;\n    this.setState({\"api\": api});\n  }\n\n  handleRatingChange(e) {\n    let api = Object.assign({}, this.state.api);\n    api.rating = e.target.value;\n    this.setState({\"api\": api});  \n  }\n\n  handleInput(e) {\n    const query = e.target.value;\n    this.setState({ query });\n  }\n\n  handleSubmit(e) {\n\n    // stop form from submitting, which would reload page\n    e.preventDefault();\n    \n    // ignore empty submissions\n    if (this.state.query.length === 0) {\n      return;\n    }\n    // reset images\n    this.setState({ \"images\": [] });\n\n    // set query parameters and reset error message\n    let queryError = '';\n    const { key, baseUrl, limit, rating, lang } = this.state.api;\n    const query = this.state.query;\n    const url = `${baseUrl}?api_key=${key}&q=${query}&limit=${limit}&offset=0&rating=${rating}&lang=${lang}`\n\n    // request the giphies\n    fetch(url)\n    .then(response => {\n\n      if (response.status >= 200 && response.status <= 299) {\n        return response.json();\n      } else {\n        throw Error(response.statusText);\n      }\n\n    }).then(jsonResults => {\n\n      // get image id to build image tags later\n      const images = jsonResults.data.map( (item) => {\n        return { \"id\": item.id, \"username\": item.username };\n      });\n\n      this.setState({ \n        images, \n        \"executedQuery\": query,\n        \"query\": '',\n        queryError \n      });\n\n    }).catch( (error) => {\n\n      // log your error. Don't do console.log, of course.\n      console.log(error);\n\n      // tell the user\n      queryError = \"There was a problem with your query. Please try again.\";\n      \n      this.setState({ \n        \"executedQuery\": query,\n        \"query\": '',\n        queryError \n      });\n    });\n  }\n  \n  render() {\n    \n    return (\n      <div className=\"App\">\n        <Header \n          handleInput={this.handleInput} \n          handleSubmit={this.handleSubmit}\n          inputValue={this.state.query}\n        />\n        <Filter \n          handleLimitChange={this.handleLimitChange}\n          handleLangChange={this.handleLangChange}\n          handleRatingChange={this.handleRatingChange}\n        />\n        <section>\n          <Main \n            images={this.state.images} \n            executedQuery={this.state.executedQuery}\n            error={this.state.queryError}\n            usernameQuery={this.state.usernameQuery}\n            handleUsernameClick={this.handleUsernameClick}\n          />\n          <Aside \n            api={this.state.api}\n            usernameQuery={this.state.usernameQuery} \n            handleUsernameResetClick={this.handleUsernameResetClick}\n          />\n        </section>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}